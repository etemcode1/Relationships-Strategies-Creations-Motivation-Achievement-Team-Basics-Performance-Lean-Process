Here are **7 advanced code examples** that integrate **cross-functional teams, personality differences, and engineering management** with the goal of enhancing **system reliability and overall performance**. These examples are designed to be **practical, realistic, and smart**, focusing on clear communication, team collaboration, and system optimization across different functions.

---

### 1. **Personality-Based Task Assignment in a Microservices Architecture (Python + FastAPI)**  
This example demonstrates how to assign tasks based on team members' personality profiles in a **microservices architecture**, ensuring effective collaboration and system performance.

```python
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

# Personality types and their task preferences
personality_preferences = {
    "Analytical": "Data analysis",
    "Creative": "UI/UX design",
    "Driver": "Project management",
    "Amiable": "Customer support"
}

class TeamMember(BaseModel):
    name: str
    personality: str

@app.post("/assign_task/")
def assign_task(member: TeamMember):
    task = personality_preferences.get(member.personality, "General tasks")
    return {"team_member": member.name, "assigned_task": task}

# Example usage
# POST request body: {"name": "Alice", "personality": "Creative"}
```

In this example, team members are assigned tasks that align with their **personality strengths**, improving collaboration and productivity within cross-functional teams.

---

### 2. **Real-Time Collaboration and Feedback System for Engineers (React + Node.js + WebSockets)**  
This example shows how to build a **real-time feedback system** where engineers can collaborate, provide feedback, and resolve issues instantly using **WebSockets** for improved communication.

**Backend (Node.js + WebSocket):**

```javascript
const WebSocket = require('ws');
const server = new WebSocket.Server({ port: 8080 });

server.on('connection', socket => {
  socket.on('message', message => {
    server.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
});
```

**Frontend (React):**

```javascript
import React, { useState, useEffect } from 'react';

const socket = new WebSocket('ws://localhost:8080');

function FeedbackSystem() {
  const [feedback, setFeedback] = useState('');
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    socket.onmessage = event => {
      setMessages(prev => [...prev, event.data]);
    };
  }, []);

  const sendFeedback = () => {
    socket.send(feedback);
    setFeedback('');
  };

  return (
    <div>
      <input
        type="text"
        value={feedback}
        onChange={e => setFeedback(e.target.value)}
      />
      <button onClick={sendFeedback}>Send Feedback</button>
      <ul>
        {messages.map((msg, index) => <li key={index}>{msg}</li>)}
      </ul>
    </div>
  );
}

export default FeedbackSystem;
```

This **real-time collaboration tool** ensures that engineers across teams can quickly communicate issues, get feedback, and resolve bottlenecks without delays.

---

### 3. **Personality Compatibility for Paired Programming (Python)**  
This example uses a simple algorithm to match engineers for paired programming based on personality compatibility, helping cross-functional teams work together more effectively.

```python
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Example personality profiles (Analytical, Creative, Driver, Amiable)
personalities = {
    "Alice": [1, 0, 0, 0],
    "Bob": [0, 1, 0, 0],
    "Charlie": [0, 0, 1, 0],
    "David": [0, 0, 0, 1]
}

# Cosine similarity to find best match
def find_best_match(person_name):
    person_vector = np.array(personalities[person_name]).reshape(1, -1)
    similarities = {}
    
    for name, vector in personalities.items():
        if name != person_name:
            similarity = cosine_similarity(person_vector, np.array(vector).reshape(1, -1))
            similarities[name] = similarity[0][0]
    
    best_match = max(similarities, key=similarities.get)
    return best_match

print(f"Best match for Alice: {find_best_match('Alice')}")
```

By ensuring that engineers with compatible personalities are paired for programming, this improves **collaboration quality** and reduces friction.

---

### 4. **Automated Sprint Planning with Cross-Functional Teams (Python + Trello API)**  
This example uses the Trello API to automate sprint planning by assigning tasks to cross-functional teams based on their expertise and available time.

```python
import requests
import json

API_KEY = 'your_trello_api_key'
TOKEN = 'your_trello_token'
BOARD_ID = 'your_board_id'

def create_sprint_task(task_name, team_member, list_id):
    url = f"https://api.trello.com/1/cards?name={task_name}&idList={list_id}&key={API_KEY}&token={TOKEN}"
    response = requests.post(url)
    return response.json()

# Example usage
task_name = "Refactor payment gateway"
team_member = "John"
list_id = "your_sprint_list_id"
create_sprint_task(task_name, team_member, list_id)
```

This code automatically assigns sprint tasks to team members on Trello based on their expertise, ensuring **efficient project management** and reducing planning time.

---

### 5. **Engineering Management Dashboard for System Reliability (React + D3.js + MongoDB)**  
This example creates a **dashboard for engineering management** that tracks system reliability and performance metrics across teams, helping to quickly identify bottlenecks and improve efficiency.

**Frontend (React + D3.js):**

```javascript
import React, { useState, useEffect } from 'react';
import * as d3 from 'd3';

function ReliabilityDashboard() {
  const [metrics, setMetrics] = useState([]);

  useEffect(() => {
    fetch('/api/reliability-metrics')
      .then(response => response.json())
      .then(data => setMetrics(data));
  }, []);

  useEffect(() => {
    const svg = d3.select('svg');
    svg.selectAll('circle')
      .data(metrics)
      .enter()
      .append('circle')
      .attr('cx', (d, i) => i * 50 + 30)
      .attr('cy', d => 200 - d.performance * 10)
      .attr('r', 20);
  }, [metrics]);

  return <svg width="500" height="300"></svg>;
}

export default ReliabilityDashboard;
```

**Backend (Node.js + MongoDB):**

```javascript
const express = require('express');
const app = express();
const MongoClient = require('mongodb').MongoClient;

app.get('/api/reliability-metrics', (req, res) => {
  MongoClient.connect('mongodb://localhost:27017/mydb', (err, client) => {
    const db = client.db('mydb');
    db.collection('metrics').find().toArray((err, results) => {
      res.json(results);
    });
  });
});

app.listen(3000, () => console.log('Server running on port 3000'));
```

This **dashboard tracks real-time system performance**, enabling managers to make informed decisions and improve team reliability.

---

### 6. **Adaptive Task Prioritization Based on Team Morale (Python + NLP)**  
This example uses **Natural Language Processing (NLP)** to analyze team members' chat messages and adapt task prioritization based on team morale, ensuring high-performance delivery.

```python
from textblob import TextBlob

# Sample team chat logs
chat_logs = [
    "I feel really good about this sprint",
    "This task is frustrating",
    "I'm making progress, but itâ€™s slow"
]

# Analyze morale using sentiment analysis
def analyze_morale(logs):
    total_sentiment = 0
    for log in logs:
        analysis = TextBlob(log)
        total_sentiment += analysis.sentiment.polarity
    average_sentiment = total_sentiment / len(logs)
    return "High morale" if average_sentiment > 0 else "Low morale"

morale = analyze_morale(chat_logs)
print(f"Team Morale: {morale}")
```

This ensures that **team tasks are reprioritized** based on real-time feedback and morale, optimizing productivity.

---

### 7. **Cross-Functional Team Role Assignment via Task Distribution (Python + Flask)**  
This example assigns roles dynamically to team members based on cross-functional expertise and **availability**, improving resource management and system reliability.

```python
from flask import Flask, jsonify, request

app = Flask(__name__)

team = {
    "Alice": {"role": "Developer", "available": True},
    "Bob": {"role": "Tester", "available": False},
    "Charlie": {"role": "Designer", "available": True}
}

@app.route('/assign_role/', methods=['POST'])
def assign_role():
    task = request.json['task']
    for member, info in team.items():
        if info['available']:
            return jsonify({"task": task, "assigned_to": member, "role": info["role"]})
    return jsonify({"error": "No one available"})

# Example usage
# POST request: {"task": "Create UI mockups"}
```

By **dynamically assigning roles**, this ensures efficient task management and maximizes resource utilization across cross-functional teams

.

---

These examples leverage a **practical and realistic approach** to solving team and system challenges, optimizing performance while accounting for **personality differences, engineering management principles, and cross-functional collaboration**.
